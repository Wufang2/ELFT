Accumulating evaluation results...
DONE (t=18.86s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.660, per category = [ 0.743  0.679  0.621  0.515  0.543  0.768  0.728  0.816  0.483  0.692
  0.606  0.761  0.747  0.676  0.664  0.384  0.673  0.679  0.746  0.683]
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.853, per category = [ 0.924  0.885  0.863  0.785  0.770  0.886  0.917  0.940  0.700  0.916
  0.741  0.923  0.921  0.912  0.906  0.643  0.882  0.783  0.909  0.861]
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.729, per category = [ 0.849  0.747  0.664  0.571  0.626  0.821  0.810  0.871  0.529  0.785
  0.684  0.814  0.843  0.734  0.736  0.392  0.754  0.730  0.826  0.789]
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.286, per category = [ 0.601  0.173  0.319  0.301  0.243  0.220  0.408  0.000  0.216  0.383
  0.000  0.290  0.383  0.267  0.325  0.170  0.433 -1.000 -1.000  0.417]
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.526, per category = [ 0.654  0.537  0.586  0.472  0.570  0.511  0.647  0.586  0.466  0.695
  0.246  0.579  0.498  0.470  0.569  0.301  0.687  0.372  0.474  0.602]
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.751, per category = [ 0.813  0.767  0.724  0.684  0.749  0.863  0.884  0.837  0.555  0.770
  0.682  0.796  0.806  0.772  0.783  0.522  0.760  0.704  0.780  0.777]
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.490, per category = [ 0.561  0.520  0.390  0.327  0.251  0.649  0.433  0.764  0.272  0.336
  0.636  0.689  0.621  0.515  0.325  0.259  0.269  0.715  0.704  0.560]
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.766, per category = [ 0.808  0.778  0.692  0.609  0.563  0.864  0.789  0.915  0.660  0.782
  0.771  0.875  0.858  0.769  0.742  0.579  0.729  0.898  0.846  0.793]
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.826, per category = [ 0.842  0.828  0.781  0.731  0.714  0.901  0.831  0.932  0.768  0.826
  0.818  0.908  0.895  0.817  0.801  0.682  0.812  0.922  0.888  0.832]
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.492, per category = [ 0.723  0.426  0.491  0.545  0.528  0.533  0.628  0.000  0.435  0.613
  0.033  0.463  0.636  0.535  0.583  0.477  0.615 -1.000 -1.000  0.585]
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.746, per category = [ 0.768  0.725  0.737  0.696  0.728  0.803  0.780  0.773  0.740  0.792
  0.582  0.787  0.795  0.715  0.728  0.625  0.804  0.807  0.747  0.778]
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.899, per category = [ 0.898  0.900  0.892  0.873  0.874  0.949  0.948  0.949  0.861  0.914
  0.876  0.932  0.927  0.875  0.894  0.786  0.896  0.932  0.906  0.903]
==> Building model..
[INFO] Register count_linear() for <class 'torch.nn.modules.linear.Linear'>.
[INFO] Register zero_ops() for <class 'torch.nn.modules.dropout.Dropout'>.
[INFO] Register count_normalization() for <class 'torch.nn.modules.normalization.LayerNorm'>.
[INFO] Register count_convNd() for <class 'torch.nn.modules.conv.Conv2d'>.
[INFO] Register zero_ops() for <class 'torch.nn.modules.container.Sequential'>.
[INFO] Register zero_ops() for <class 'torch.nn.modules.activation.ReLU'>.
[INFO] Register zero_ops() for <class 'torch.nn.modules.pooling.MaxPool2d'>.
[INFO] Register count_convNd() for <class 'torch.nn.modules.conv.Conv1d'>.
flops: 223.88 G, params: 40.44 M